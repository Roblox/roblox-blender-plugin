# Copyright © 2025 Roblox Corporation

# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
# associated documentation files (the “Software”), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do
# so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all copies or substantial
# portions of the Software.

# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
# OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# SPDX-License-Identifier: MIT

import os
import asyncio
import openapi_client
import certifi
from openapi_client.models import (
    RobloxOpenCloudAssetsV1CreationContext,
    RobloxOpenCloudAssetsV1Creator,
    RobloxOpenCloudAssetsV1AssetType,
    RobloxLongrunningOperation,
    RobloxOpenCloudAssetsV1Asset,
)
from openapi_client.api.asset_api import AssetApi
from openapi_client.api.upload_status_api import UploadStatusApi


class AssetsUploadClient:
    """
    A wrapper for the AssetsUploadClient generated by swagger.
    By default, this client makes request to the production environment.
    For testing, you can point this client to your desired environment by setting environment variables.
    You can export the environment variables: ASSETS_UPLOAD_API_BASE_URL and ENVIRONMENT. e.g.
        export ASSETS_UPLOAD_API_BASE_URL=<base-url>
        export ENVIRONMENT=local
    If the value of ENVIRONMENT is anything but 'local', its value is ignored.
    """

    ASSETS_UPLOAD_API_BASE_URL_ENV_NAME = "ASSETS_UPLOAD_API_BASE_URL"
    BASE_URL = "https://apis.roblox.com/assets"
    ENVIRONMENT_ENV_NAME = "ENVIRONMENT"
    ENVIRONMENT = "production"

    UPLOAD_STATUS_QUERY_INTERVAL_SECONDS = 5
    UPLOAD_ASSET_TIMEOUT_SECONDS = float(10)
    GET_ASSET_UPLOAD_STATUS_TIMEOUT_SECONDS = float(2)

    def __init__(self, creator: RobloxOpenCloudAssetsV1Creator, api_key="", oauth2_token=""):
        """
        Initializes an AssetsUploadClient, accepts an environment as a parameter.
        """
        base_url = os.getenv(AssetsUploadClient.ASSETS_UPLOAD_API_BASE_URL_ENV_NAME, AssetsUploadClient.BASE_URL)
        environment = os.getenv(AssetsUploadClient.ENVIRONMENT_ENV_NAME, AssetsUploadClient.ENVIRONMENT)

        if not base_url:
            raise Exception("base_url must be specified.")
        if not environment:
            raise Exception("environment must be specified.")
        if not api_key and not oauth2_token:
            raise ValueError("Either api_key or oauth2_token must be specified.")
        if creator.user_id == 0 and creator.group_id == 0:
            raise ValueError("Invalid creator.")

        configuration = openapi_client.Configuration()
        configuration.ssl_ca_cert = certifi.where()
        configuration.host = base_url
        self.base_client = openapi_client.ApiClient(configuration=configuration)
        if api_key:
            self.base_client.set_default_header("x-api-key", api_key)
        elif oauth2_token:
            self.base_client.set_default_header("Authorization", f"Bearer {oauth2_token}")

        if environment == "local":
            self.base_client.set_default_header("robloxctx-authenticated-userid", str(self.creator_id))
            self.base_client.set_default_header("robloxctx-account-id", str(self.creator_id))

        self.asset_client = AssetApi(self.base_client)
        self.creator = creator
        self.upload_status_client = UploadStatusApi(self.base_client)

    async def __aenter__(self):
        return self

    async def __aexit__(self, *args):
        await self.base_client.close()

    async def upload_asset_async(
        self,
        asset_type: RobloxOpenCloudAssetsV1AssetType,
        asset_name: str,
        asset_description: str,
        file_path: str,
        asset_id: int = 0,
        request_timeout_seconds: float = 0,
    ) -> str:
        """
        Uploads an asset asynchronously.
        Creates a new asset if asset_id is not specified. Creates a new asset version if the asset_id is specified.
        Returns an operation ID as a UUID formatted string.
        Raises an ApiException in the event of an error.
        """

        if asset_type == RobloxOpenCloudAssetsV1AssetType.UNSPECIFIED:
            raise ValueError("Invalid asset_type.")
        if not asset_name:
            raise ValueError("Invalid asset_name. Must specify an asset_name.")
        if not file_path:
            raise ValueError("Invalid file_path. Must specify a file_path.")

        create_request = RobloxOpenCloudAssetsV1Asset(
            asset_type=asset_type,
            asset_id=asset_id if asset_id > 0 else 0,
            display_name=asset_name,
            description=asset_description,
            creation_context=RobloxOpenCloudAssetsV1CreationContext(creator=self.creator),
        )

        if asset_id > 0:
            operation = await self.asset_client.asset_update(
                asset_id=asset_id,
                request=create_request,
                file_content=file_path,
                _request_timeout=(
                    request_timeout_seconds
                    if request_timeout_seconds > 0
                    else AssetsUploadClient.UPLOAD_ASSET_TIMEOUT_SECONDS
                ),
            )
        else:
            operation = await self.asset_client.asset_create(
                request=create_request,
                file_content=file_path,
                _request_timeout=(
                    request_timeout_seconds
                    if request_timeout_seconds > 0
                    else AssetsUploadClient.UPLOAD_ASSET_TIMEOUT_SECONDS
                ),
            )

        operation_id = operation.path[11:]
        return operation_id

    async def poll_asset_upload_status_async(
        self, operation_id: str, request_timeout_seconds: float = 0
    ) -> RobloxLongrunningOperation:
        """
        Polls the status of an asset upload asynchronously.
        Returns a RobloxLongrunningOperation.
        """

        if not operation_id:
            raise ValueError("Invalid operation_id.")

        return await self.upload_status_client.upload_status_get_operation_status(
            operation_id=operation_id,
            _request_timeout=(
                request_timeout_seconds
                if request_timeout_seconds > 0
                else AssetsUploadClient.GET_ASSET_UPLOAD_STATUS_TIMEOUT_SECONDS
            ),
        )

    async def poll_asset_upload_status_repeated_async(
        self, operation_id: str, num_tries: int = 5, request_timeout_seconds: float = 0
    ):
        """
        Asynchronously polls the status of an asset upload the number of times specified or until the status is either FAILED or SUCCESS.
        Returns a tuple of (swagger_client.OperationStatus, swagger_client.AssetInfo, swagger_client.PublicError).
        The AssetInfo is guaranteed to have a value if OperationStatus is SUCCESS.
        The PublicError can only have a value if OperationStatus is FAILED, but it is not guaranteed to have a value.
        """

        for i in range(num_tries):
            try:
                operation = await self.poll_asset_upload_status_async(
                    operation_id=operation_id, request_timeout_seconds=request_timeout_seconds
                )
                if operation.done:
                    return operation
            except Exception as e:
                print("Exception when getting asset upload status: %s\n" % e)

            if i < num_tries - 1:
                await asyncio.sleep(AssetsUploadClient.UPLOAD_STATUS_QUERY_INTERVAL_SECONDS)

        return operation

    async def upload_asset_and_wait_for_done_async(
        self,
        asset_type: RobloxOpenCloudAssetsV1AssetType,
        asset_name: str,
        asset_description: str,
        file_path: str,
        asset_id: int = 0,
        upload_request_timeout_seconds: float = 0,
        num_poll_status_tries: int = 5,
        poll_status_request_timeout_seconds: float = 0,
    ):
        """
        Asynchronously uploads an asset and polls the status of the upload 'num_poll_status_tries' times or until the asset is created and the asset_id/asset_version_number are returned.
        """

        operation_id = await self.upload_asset_async(
            asset_type=asset_type,
            asset_name=asset_name,
            asset_description=asset_description,
            file_path=file_path,
            asset_id=asset_id,
            request_timeout_seconds=upload_request_timeout_seconds,
        )

        return await self.poll_asset_upload_status_repeated_async(
            operation_id=operation_id,
            num_tries=num_poll_status_tries,
            request_timeout_seconds=poll_status_request_timeout_seconds,
        )
